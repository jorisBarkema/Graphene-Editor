{"version":3,"sources":["Atom.js","Connection.js","GrapheneCanvas.js","FileInput.js","Menu.js","App.js","reportWebVitals.js","index.js"],"names":["Atom","props","render","x","y","radius","scale","fill","state","hovered","getColor","onMouseEnter","setState","onMouseLeave","onClick","handleClick","selected","updateScale","s","addToSelection","id","React","Component","Connection","points","stroke","strokeWidth","GrapheneCanvas","componentDidMount","window","addEventListener","onResize","zoomStage","startDragging","stopDragging","dragMove","createCanvas","scaleX","innerWidth","width","scaleY","innerHeight","height","defaultScale","Math","min","offsetx","offsety","currentScale","minScale","centeringX","centeringY","screenBottomRight","getScreenPositionFromStage","console","log","squares","currentSquares","e","dragStart","getStagePositionFromScreen","pageX","pageY","dragging","p","dragged","totalWidth","totalHeight","ref","stage","connections","map","connection","getConnectionData","d","selection","type","c","addConnectionToSelection","key","atoms","a","coords","coordinateToScreenCoordinate","ids","includes","addAtomToSelection","mouseOverMenu","mouseOverTimeline","factor","deltaY","newscale","getCurrentScale","zoomStageTo","oldscale","pos","getCurrentPosition","newPositions","to","duration","onFinish","topLeft","bottomRight","rowStart","floor","rowEnd","ceil","columnStart","columnEnd","rows","i","push","columns","mx","my","connectionIndexByID","length","atomIndexByID","b","t","different","sa","st","ss","sb","dx","dy","result","sx","sy","error","absolutePosition","createRef","FileInput","startUpload","uploader","click","uploadFile","bind","event","file","target","files","text","then","loadText","document","getElementsByName","value","name","onChange","this","Menu","className","IconButton","disabled","canAddConnection","size","style","fontSize","aria-label","addConnectionBetweenSelectedAtoms","canRemoveConnection","removeSelectedConnection","canReplaceByAtom","replaceSelectionByAtom","canReplaceByTrio","replaceSelectionByTrio","fileInput","downloadFile","connectionIndexByAtoms","App","totalConnections","totalAtoms","canvas","lines","split","parseFloat","line","parseInt","z","element","createElement","setAttribute","encodeURIComponent","display","body","appendChild","removeChild","indexOf","splice","removeConnectionByID","removeAtomByID","addConnectionBetweenAtoms","closestToNumber","n","best","best_d","abs","distanceBetween","distanceTo","bestX","bestY","sqrt","closestAtom","closest","closest_d","new_id","selectionIDs","guide","index","madeConnectionFrom","atom_id","closest_distance","old_atom","first","second","third","neighbor_id","neighbor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ebb4ff19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Circle } from 'react-konva';\r\n\r\nclass Atom extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hovered: false,\r\n            scale: props.scale\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n\r\n        //console.log(this.props.s)\r\n        //console.log(15 / this.props.s)\r\n\r\n        return ([<Circle\r\n            x = {this.props.x}\r\n            y = {this.props.y}\r\n            radius = {15 / this.props.scale}\r\n            fill = {this.state.hovered ? this.getColor() : ''}\r\n            onMouseEnter = {() => this.setState({hovered: true})}\r\n            onMouseLeave = {() => this.setState({hovered: false})}\r\n            onClick = {() => this.handleClick()}\r\n        />,\r\n        <Circle\r\n            x = {this.props.x}\r\n            y = {this.props.y}\r\n            radius = {8 / this.props.scale}\r\n            fill = {this.getColor()}\r\n            onMouseEnter = {() => this.setState({hovered: true})}\r\n            onMouseLeave = {() => this.setState({hovered: false})}\r\n            onClick = {() => this.handleClick()}\r\n        />])\r\n    }\r\n\r\n    getColor = () => {\r\n        return this.props.selected ? 'red' : 'black';\r\n    }\r\n    \r\n    updateScale = (s) => {\r\n        this.setState({\r\n            scale: s\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.addToSelection(this.props.id);\r\n    }\r\n}\r\n\r\nexport default Atom","import React from 'react';\r\n\r\nimport { Line } from 'react-konva';\r\n\r\nclass Connection extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hovered: false,\r\n            //scale: props.scale\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        return ([<Line\r\n            points = {this.props.points}\r\n            stroke = {this.state.hovered ? this.getColor() : ''}\r\n            strokeWidth = {12 / this.props.scale}\r\n            onMouseEnter = {() => this.setState({hovered: true})}\r\n            onMouseLeave = {() => this.setState({hovered: false})}\r\n            onClick = {() => this.handleClick()}\r\n        />,\r\n        <Line\r\n            points = {this.props.points}\r\n            stroke = {this.getColor()}\r\n            strokeWidth = {(this.state.hovered ? 5 : 4) / this.props.scale}\r\n            onMouseEnter = {() => this.setState({hovered: true})}\r\n            onMouseLeave = {() => this.setState({hovered: false})}\r\n            onClick = {() => this.handleClick()}\r\n        />])\r\n    }\r\n    \r\n    getColor = () => {\r\n        return this.props.selected ? 'red' : 'black';\r\n    }\r\n\r\n    updateScale = (s) => {\r\n        //this.setState({\r\n        //    scale: s\r\n        //})\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.addToSelection(this.props.id);\r\n    }\r\n}\r\n\r\nexport default Connection","import React from 'react';\r\nimport { Stage, Layer, Rect} from 'react-konva';\r\n\r\nimport Atom from './Atom.js';\r\nimport Connection from './Connection.js';\r\n\r\nclass GrapheneCanvas extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.defaultScale = 50;\r\n\r\n        this.state = {\r\n            dragging: false,\r\n            selection: {},\r\n            offsetx: 0,\r\n            offsety: 0,\r\n            squares: {rows: [0], columns: [0]},\r\n            centeringX: 0,\r\n            centeringY: 0,\r\n            totalWidth: window.innerWidth,\r\n            totalHeight: window.innerHeight,\r\n            currentScale: 50,\r\n            minScale: 50,\r\n            dragStart: {x: 0, y: 0},\r\n            dragged: {x: 0, y: 0},\r\n            createCanvas: () => this.createCanvas()\r\n        }\r\n\r\n        this.stage = React.createRef();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        window.addEventListener('click', this.handleClick);\r\n        window.addEventListener('resize', this.onResize);\r\n        window.addEventListener('wheel', this.zoomStage);\r\n\r\n        \r\n        window.addEventListener('mousedown', this.startDragging);\r\n        window.addEventListener('mouseup', this.stopDragging);\r\n        window.addEventListener('mousemove', this.dragMove);\r\n        \r\n        this.createCanvas();\r\n    }\r\n\r\n    createCanvas = () => {\r\n        let scaleX = (2 * window.innerWidth / 3) / this.props.width;\r\n        let scaleY = (2 * window.innerHeight / 3) / this.props.height;\r\n\r\n        this.defaultScale = Math.min(scaleX, scaleY);\r\n\r\n        this.setState({\r\n            offsetx: this.props.width / 2,\r\n            offsety: this.props.height / 2,\r\n            currentScale: Math.min(scaleX, scaleY),\r\n            minScale: Math.min(scaleX, scaleY),\r\n            centeringX: 0,\r\n            centeringY: 0\r\n        }, () => {\r\n            let screenBottomRight = this.getScreenPositionFromStage(this.props.width / 2, this.props.height / 2);\r\n            console.log(screenBottomRight);\r\n            \r\n            this.setState({\r\n                centeringX: ((window.innerWidth - screenBottomRight.x) / this.state.currentScale) / 2,\r\n                centeringY: ((window.innerHeight - screenBottomRight.y) / this.state.currentScale) / 2\r\n            }, () => {\r\n                this.setState({\r\n                    squares: this.currentSquares()\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    startDragging = (e) => {\r\n\r\n        this.setState({\r\n            dragStart: this.getStagePositionFromScreen(e.pageX, e.pageY)\r\n        }, () => {\r\n            this.setState({dragging: true});\r\n        })\r\n    }\r\n\r\n    dragMove = (e) => {\r\n        if (!this.state.dragging) return;\r\n\r\n        let s = this.state.dragStart;\r\n        let p = this.getStagePositionFromScreen(e.pageX, e.pageY);\r\n\r\n        this.setState({\r\n            dragged: {\r\n                x: this.state.dragged.x + p.x - s.x,\r\n                y: this.state.dragged.y + p.y - s.y\r\n            },\r\n            dragStart: p\r\n        })\r\n\r\n        //console.log(this.state.dragged);\r\n    }\r\n\r\n    stopDragging = (e) => {\r\n        this.setState({\r\n            dragging: false\r\n        }, () => {\r\n            //console.log(this.state.dragging);\r\n        })\r\n\r\n        //console.log(\"dragging set to false\")\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div id=\"canvas-container\">\r\n                <Stage \r\n                    width={this.state.totalWidth} \r\n                    height={this.state.totalHeight}\r\n                    scaleX={this.defaultScale}\r\n                    scaleY={this.defaultScale} \r\n                    \r\n                    ref={ref => (this.stage = ref)}\r\n                >\r\n                    \r\n                    <Layer\r\n                        x = {this.state.centeringX}\r\n                        y = {this.state.centeringY}\r\n                    >\r\n                        <Rect\r\n                            width = {this.props.width}\r\n                            height = {this.props.height}\r\n                            stroke = 'black'\r\n                            strokeWidth = {0.02}\r\n                            fill= {'rgb(220, 220, 220'}\r\n                        />\r\n\r\n                        {\r\n                            this.props.connections.map((connection) => {\r\n                                let data = this.getConnectionData(connection);\r\n\r\n                                return data.map((d) => {\r\n                                    return <Connection\r\n                                        key = {d.key}\r\n                                        id= {d.id}\r\n                                        scale = {this.state.currentScale}\r\n                                        points = {d.points}\r\n                                        selected = {this.props.selection.type === 'connection' && this.props.selection.id === d.id}\r\n                                        addToSelection = {(c) => this.addConnectionToSelection(c)}\r\n                                    />\r\n                                })\r\n                            })\r\n                        }\r\n\r\n                        {\r\n                            this.props.atoms.map((a) => {\r\n\r\n                                let coords = this.coordinateToScreenCoordinate(a.x, a.y);\r\n\r\n                                return (<Atom \r\n                                    key = {a.id}\r\n                                    id = {a.id}\r\n                                    scale = {this.state.currentScale}\r\n                                    x = {coords.x}\r\n                                    y = {coords.y}\r\n                                    selected = {this.props.selection.type === 'atom' && this.props.selection.ids.includes(a.id)}\r\n                                    addToSelection = {(a) => this.addAtomToSelection(a)}\r\n                                />)\r\n                            })\r\n                        }\r\n                    </Layer>\r\n\r\n                    <Layer>\r\n                    <Rect\r\n                            width = {this.state.centeringX}\r\n                            height = {10 * this.props.height}\r\n                            fill = {\"#fff\"}\r\n                            //fillLinearGradientStartPoint = {{x: 0, y: 0}}\r\n                            //fillLinearGradientEndPoint = {{x: this.state.centeringX, y: 0}}\r\n                            //fillLinearGradientColorStops={[0, \"#ffff\", 0.97, \"#ffff\", 1, \"#fff0\"]}\r\n                    />\r\n                    <Rect\r\n                            x = {this.state.centeringX + this.props.width}\r\n                            width = {this.state.centeringX}\r\n                            height = {10 * this.props.height}\r\n                            fill = {\"#fff\"}\r\n                            //fillLinearGradientStartPoint = {{x: 0, y: 0}}\r\n                            //fillLinearGradientEndPoint = {{x: this.state.centeringX + this.props.width, y: 0}}\r\n                            //fillLinearGradientColorStops={[0, \"#fff0\", 0.03, \"#ffff\", 1, \"#ffff\"]}\r\n                    />\r\n\r\n                    <Rect\r\n                            width = {10 * this.props.width}\r\n                            height = {this.state.centeringY}\r\n                            fill = {\"#fff\"}\r\n                            //fillLinearGradientStartPoint = {{x: 0, y: 0}}\r\n                            //fillLinearGradientEndPoint = {{x: 0, y: this.state.centeringY}}\r\n                            //fillLinearGradientColorStops={[0, \"#ffff\", 0.97, \"#ffff\", 1, \"#fff0\"]}\r\n                    />\r\n\r\n                    <Rect\r\n                            y = {this.state.centeringY + this.props.height}\r\n                            width = {10 * this.props.width}\r\n                            height = {this.state.centeringY}\r\n                            fill = {\"#fff\"}\r\n                            //fillLinearGradientStartPoint = {{x: 0, y: 0}}\r\n                            //fillLinearGradientEndPoint = {{x: this.state.centeringX + this.props.width, y: 0}}\r\n                            //fillLinearGradientColorStops={[0, \"#fff0\", 0.03, \"#ffff\", 1, \"#ffff\"]}\r\n                    />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    zoomStage = (e) => {\r\n        if (this.state.mouseOverMenu || this.state.mouseOverTimeline) return;\r\n        if (this.stage === null) return;\r\n        \r\n        let factor = 1;\r\n        let scaling = 0.4;\r\n\r\n        if (e.deltaY < 0) factor += scaling;\r\n        if (e.deltaY > 0) factor -= scaling;\r\n\r\n        let newscale = this.getCurrentScale() * factor;\r\n\r\n        //this.zoomStageTo(e.pageX, e.pageY, newscale);\r\n        this.zoomStageTo(window.innerWidth / 2, window.innerHeight / 2, newscale);\r\n    }\r\n\r\n    zoomStageTo = (x, y, newscale) => {\r\n        //if (newscale > this.state.maxscale) newscale = this.state.maxscale;\r\n\r\n        if (newscale < this.state.minScale) newscale = this.state.minScale;\r\n\r\n        if (this.stage === null) return;\r\n\r\n        let oldscale = this.getCurrentScale();\r\n        let pos = this.getCurrentPosition();\r\n\r\n        let newPositions = [x - (x - pos.x) * newscale / oldscale, y - (y - pos.y) * newscale / oldscale];\r\n\r\n        this.setState({\r\n            currentScale: newscale\r\n        });\r\n\r\n        this.stage.to({\r\n            scaleX: newscale,\r\n            scaleY: newscale,\r\n            x: newPositions[0],\r\n            y: newPositions[1],\r\n            duration: 0.1,\r\n            onFinish: () => {\r\n            }\r\n        });\r\n    }\r\n\r\n    currentSquares = () => {\r\n\r\n        //let scale = this.stage.scaleX();\r\n\r\n        // Do it some distance out of bounds so they load before they are needed\r\n        let topLeft = this.getStagePositionFromScreen(0, 0);\r\n        let bottomRight = this.getStagePositionFromScreen(window.innerWidth, window.innerHeight);\r\n\r\n        let rowStart = Math.floor(topLeft.x / this.props.height - 1);\r\n        let rowEnd = Math.ceil(bottomRight.x / this.props.height + 1);\r\n\r\n        let columnStart = Math.floor(topLeft.y / this.props.width - 1);\r\n        let columnEnd = Math.ceil(bottomRight.y / this.props.width + 1);\r\n\r\n        let rows = [];\r\n        for (let i = rowStart; i <= rowEnd; i++) {\r\n            rows.push(i);\r\n        }\r\n\r\n        let columns = [];\r\n        for (let i = columnStart; i <= columnEnd; i++) {\r\n            columns.push(i);\r\n        }\r\n\r\n        console.log({rows: rows, columns: columns});\r\n        return {rows: rows, columns: columns}\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        //let p = this.getStagePositionFromScreen(e.pageX, e.pageY);\r\n\r\n        //console.log(\"screen position: \" + e.pageX + \", \" + e.pageY);\r\n        //console.log(\"stage position: \" + p.x + \", \" + p.y);\r\n    }\r\n\r\n    getStagePositionFromScreen = (x, y) => {\r\n\r\n        let s = this.state.currentScale;\r\n        let pos = this.getCurrentPosition();\r\n\r\n        let mx = (x - pos.x) / s;\r\n        let my = (y - pos.y) / s;\r\n        \r\n        return {x: mx - this.state.offsetx - this.state.centeringX, y: my - this.state.offsety - this.state.centeringY};\r\n        \r\n    }\r\n\r\n    getScreenPositionFromStage = (x, y) => {\r\n        let s = this.state.currentScale;\r\n        let pos = this.getCurrentPosition();\r\n        \r\n        let mx = (x + this.state.offsetx + this.state.centeringX) * s;\r\n        let my = (y + this.state.offsety + this.state.centeringY) * s;\r\n\r\n        return {x: mx + pos.x, y: my + pos.y};\r\n    }\r\n\r\n    //distanceToPoint = (a, b) => Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\r\n\r\n    connectionIndexByID = (id) => {\r\n\r\n        for (let i = 0; i < this.props.connections.length; i++) {\r\n            if (this.props.connections[i].id === id) {\r\n                return i\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    atomIndexByID = (id) => {\r\n\r\n        for (let i = 0; i < this.props.atoms.length; i++) {\r\n            if (this.props.atoms[i].id === id) {\r\n                return i\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    getConnectionData = (c) => {\r\n\r\n        let a = this.props.atoms[this.atomIndexByID(c.a)];\r\n        let b = this.props.atoms[this.atomIndexByID(c.b)];\r\n\r\n        /*\r\n        * We want the line to the closest option for b\r\n        * b, or b mirrored in x, or b mirrored in y\r\n        * so to b\r\n        * or b with b.x +/- width\r\n        * or b with b.y +/- height\r\n        */\r\n        \r\n        // Copy values of b into target such that changing target does not change b\r\n        let s = {...a};\r\n        let t = {...b};\r\n    \r\n        let different = false;\r\n\r\n        let sa = this.coordinateToScreenCoordinate(a.x, a.y);\r\n        let st = this.coordinateToScreenCoordinate(t.x, t.y);\r\n        let ss = this.coordinateToScreenCoordinate(s.x, s.y);\r\n        let sb = this.coordinateToScreenCoordinate(b.x, b.y);\r\n\r\n        let dx = st.x - sa.x;\r\n        let dy = st.y - sa.y;\r\n\r\n        if (dx > this.props.width / 2) {\r\n            st.x -= this.props.width\r\n            ss.x += this.props.width\r\n            different = true;\r\n        } else if (dx < -this.props.width / 2) {\r\n            st.x += this.props.width\r\n            ss.x -= this.props.width\r\n            different = true;\r\n        }\r\n\r\n        if (dy > this.props.height / 2) {\r\n            st.y -= this.props.height\r\n            ss.y += this.props.height\r\n            different = true;\r\n        } else if (dy < -this.props.height / 2) {\r\n            st.y += this.props.height\r\n            ss.y -= this.props.height\r\n            different = true;\r\n        }\r\n\r\n        //x = {((a.x + this.state.offsetx + this.state.dragged.x) % this.props.width)}\r\n        //y = {((a.y + this.state.offsety + this.state.dragged.y) % this.props.height)}\r\n\r\n        let result = [\r\n            {\r\n                key: c.id,\r\n                id: c.id,\r\n                points: [sa.x, sa.y, st.x, st.y]\r\n            }\r\n        ];\r\n\r\n        if (different) {\r\n            result.push(\r\n                {\r\n                    key: c.id + 10e9,\r\n                    id: c.id,\r\n                    points: [ss.x, ss.y, sb.x, sb.y]\r\n                }\r\n            )\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    coordinateToScreenCoordinate = (x, y) => {\r\n        let sx = ((x + this.state.offsetx + this.state.dragged.x) % this.props.width);\r\n        let sy = ((y + this.state.offsety + this.state.dragged.y) % this.props.height);\r\n\r\n        // Because otherwise negative modulo behaves weirdly\r\n        sx = (sx + this.props.width) % this.props.width;\r\n        sy = (sy + this.props.height) % this.props.height;\r\n\r\n        return {x: sx, y: sy};\r\n    }\r\n\r\n    onResize = () => {\r\n        \r\n        /*\r\n        let bottomRight = this.getStagePositionFromScreen(window.innerWidth, window.innerHeight);\r\n        let right = bottomRight.x;\r\n        let bottom = bottomRight.y;\r\n        let scaleX = (2 * window.innerWidth / 3) / this.props.width;\r\n        let scaleY = (2 * window.innerHeight / 3) / this.props.height;\r\n\r\n\r\n        this.setState({\r\n            totalWidth: window.innerWidth,\r\n            totalHeight: window.innerHeight,\r\n            centeringX: (right - this.props.width) / 2,\r\n            centeringY: (bottom - this.props.height) / 2,\r\n            currentScale: Math.min(scaleX, scaleY),\r\n            minScale: Math.min(scaleX, scaleY),\r\n        })\r\n        */\r\n    }\r\n\r\n    getCurrentScale = () => {\r\n        let s = this.defaultScale;\r\n\r\n        try {\r\n            s = this.stage.scaleX();\r\n        } catch(error) {\r\n            console.log(error)\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    getCurrentPosition = () => {\r\n        let pos = {x: 0, y: 0};\r\n\r\n        try {\r\n            pos = this.stage.absolutePosition();\r\n        } catch(error) {\r\n            //console.log(error)\r\n        }\r\n\r\n        return pos;\r\n    }\r\n\r\n    addAtomToSelection = (id) => {\r\n        this.props.addAtomToSelection(id);\r\n    }\r\n\r\n    addConnectionToSelection = (id) => {\r\n        this.props.addConnectionToSelection(id);\r\n    }\r\n\r\n    /*\r\n    removeSelectedConnection = () => {\r\n        let id = this.props.selection.id;\r\n\r\n        console.log(\"removing connection \" + id);\r\n    }\r\n    */\r\n}\r\n\r\nexport default GrapheneCanvas","import React from 'react';\r\n\r\nclass FileInput extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.uploadFile = this.uploadFile.bind(this);\r\n\r\n        this.uploader = React.createRef();\r\n    }\r\n    \r\n    uploadFile(event) {\r\n        let file = event.target.files[0];\r\n        console.log(file);\r\n        \r\n        if (file) {\r\n            file.text().then((t) => {\r\n                console.log(t);\r\n                this.props.loadText(t);\r\n                \r\n                let input = document.getElementsByName(\"fileInput\")[0];\r\n\r\n                input.value = '';\r\n            })\r\n        }\r\n    }\r\n    \r\n    startUpload = () => {\r\n        this.uploader.click()\r\n    }\r\n\r\n    render() {\r\n        return <span id=\"file-upload-container\">\r\n            <input type=\"file\"\r\n            name=\"fileInput\"\r\n            ref={(ref) => this.uploader = ref}\r\n            onChange={this.uploadFile} />\r\n        </span>\r\n    }\r\n}\r\n\r\nexport default FileInput;","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n//import Button from '@material-ui/core/Button';\r\n\r\n//import DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\r\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\r\nimport AdjustIcon from '@material-ui/icons/Adjust';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n//import SettingsBackupRestoreIcon from '@material-ui/icons/SettingsBackupRestore';\r\n\r\nimport FileInput from './FileInput.js';\r\n\r\nclass Menu extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n        this.fileInput = React.createRef();\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div id=\"menu-container\">\r\n                <div className=\"vertical-center\">\r\n                    <div className='button-container'>\r\n                        <IconButton disabled = {!this.canAddConnection()} size=\"medium\" \r\n                                    style={{fontSize: 14}} aria-label=\"add\"\r\n                                    onClick = {() => this.addConnectionBetweenSelectedAtoms()}>\r\n                            <AddCircleIcon size=\"large\" />\r\n                            <span className='button-text'>ADD CONNECTION</span>\r\n                        </IconButton>\r\n                    </div>\r\n                    <div className='button-container'>\r\n                        <IconButton disabled = {!this.canRemoveConnection()} size=\"medium\" \r\n                                    style={{fontSize: 14}} aria-label=\"remove\"\r\n                                    onClick = {() => this.removeSelectedConnection()}>\r\n                            <RemoveCircleIcon size=\"large\" />\r\n                            <span className='button-text'>REMOVE CONNECTION</span>\r\n                        </IconButton>\r\n                    </div>\r\n                    <div className='button-container'>\r\n                        <IconButton disabled = {!this.canReplaceByAtom()} size=\"medium\" \r\n                                    style={{fontSize: 14}} aria-label=\"replace-by-one\"\r\n                                    onClick = {() => this.replaceSelectionByAtom()}>\r\n                            <AdjustIcon size=\"large\" />\r\n                            <span className='button-text'>REPLACE TRIO BY ATOM</span>\r\n                        </IconButton>\r\n                    </div>\r\n                    <div className='button-container'>\r\n                        <IconButton disabled = {!this.canReplaceByTrio()} \r\n                                    size=\"medium\" style={{fontSize: 14}} aria-label=\"replace-by-three\"\r\n                                    onClick = {() => this.replaceSelectionByTrio()}>\r\n                            <GroupWorkIcon size=\"large\" />\r\n                            <span className='button-text'>REPLACE ATOM BY TRIO</span>\r\n                        </IconButton>\r\n                    </div>\r\n                    <div className='button-container'>\r\n                        <IconButton size=\"medium\" onClick={()=>{this.fileInput.startUpload()}}\r\n                            style={{fontSize: 14}} aria-label=\"upload\">\r\n                            <PublishIcon size=\"large\" />\r\n                            <span className='button-text'>IMPORT FILE</span>\r\n                            <FileInput ref={(ref) => this.fileInput = ref} loadText = {(t) => this.loadText(t)} />\r\n                        </IconButton>\r\n                    </div>\r\n                    <div className='button-container'>\r\n                        <IconButton size=\"medium\" onClick={()=>{this.downloadFile()}} style={{fontSize: 14}} aria-label=\"download\">\r\n                            <GetAppIcon size=\"large\" />\r\n                            <span className='button-text'>EXPORT FILE</span>\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    canReplaceByTrio = () => {\r\n        return (\r\n            this.props.selection.type === 'atom' &&\r\n            this.props.selection.ids.length === 1\r\n        )\r\n    }\r\n\r\n    canReplaceByAtom = () => {\r\n        return (\r\n            this.props.selection.type === 'atom' &&\r\n            this.props.selection.ids.length === 3\r\n        )\r\n    }\r\n\r\n    connectionIndexByAtoms = (x, y) => {\r\n\r\n        for (let i = 0; i < this.props.connections.length; i++) {\r\n                if ((this.props.connections[i].a === x && this.props.connections[i].b === y) ||\r\n                    (this.props.connections[i].b === x && this.props.connections[i].a === y)) {\r\n                        return i\r\n                }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    canAddConnection = () => {\r\n        return (\r\n            this.props.selection.type === 'atom' &&\r\n            this.props.selection.ids.length === 2 && \r\n            this.connectionIndexByAtoms(this.props.selection.ids[0], this.props.selection.ids[1]) === null\r\n        )\r\n    }\r\n\r\n    canRemoveConnection = () => {\r\n        return this.props.selection.type === 'connection';\r\n    }\r\n\r\n    removeSelectedConnection = () => {\r\n        //console.log(\"removing connection called at menu\");\r\n        this.props.removeSelectedConnection();\r\n    }\r\n\r\n    addConnectionBetweenSelectedAtoms = () => {\r\n        this.props.addConnectionBetweenSelectedAtoms()\r\n    }\r\n\r\n    replaceSelectionByAtom = () => {\r\n        this.props.replaceSelectionByAtom();\r\n    }\r\n\r\n    replaceSelectionByTrio = () => {\r\n        this.props.replaceSelectionByTrio();\r\n    }\r\n\r\n    loadText = (t) => {\r\n        this.props.loadText(t);\r\n    }\r\n\r\n    downloadFile = () => {\r\n        this.props.downloadFile()\r\n    }\r\n}\r\n\r\nexport default Menu","import React from 'react';\n\nimport GrapheneCanvas from './GrapheneCanvas.js';\nimport Menu from './Menu.js';\n\nclass App extends React.Component {\n\n    totalConnections = 0;\n    totalAtoms = 0;\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selection: {},\n            atoms: [],\n            connections: [],\n            width: 5,//11.868215,\n            height: 5//9.332725\n        };\n\n        this.canvas = React.createRef();\n    }\n\n    render = () => {\n        return (\n            <div>\n                <GrapheneCanvas\n                    ref={ref => (this.canvas = ref)}\n                    selection = {this.state.selection}\n                    atoms = {this.state.atoms}\n                    connections = {this.state.connections}\n                    width = {this.state.width}\n                    height = {this.state.height}\n                    addAtomToSelection = {(id) => this.addAtomToSelection(id)}\n                    addConnectionToSelection = {(id) => this.addConnectionToSelection(id)}\n                />\n                <Menu \n                    selection = {this.state.selection}\n                    atoms = {this.state.atoms}\n                    connections = {this.state.connections}\n                    removeSelectedConnection = {() => this.removeSelectedConnection()}\n                    addConnectionBetweenSelectedAtoms = {() => this.addConnectionBetweenSelectedAtoms()}\n                    replaceSelectionByAtom = {() => this.replaceSelectionByAtom()}\n                    replaceSelectionByTrio = {() => this.replaceSelectionByTrio()}\n                    loadText = {(t) => this.loadText(t)}\n                    downloadFile = {() => this.downloadFile()}\n                />\n            </div>\n        );\n    }\n\n    loadText = (text) => {\n        let lines = text.split('\\n')\n\n        let width = parseFloat(lines[0]);\n        let height = parseFloat(lines[1]);\n\n        let atoms = [];\n        let connections = [];\n\n        for (let i = 4; i < lines.length; i++) {\n            let line = lines[i].split(/\\s+/);\n            \n            // An atom has 4 properties: id x y z\n            if (line.length === 4) {\n                atoms.push({\n                    'id': parseInt(line[0]),\n                    'x':  parseFloat(line[1]),\n                    'y':  parseFloat(line[2]),\n                    'z':  parseFloat(line[3])\n                })\n\n                this.totalAtoms++;\n            }\n\n            // A connection from a to b has 3 properties: id a b\n            else if (line.length === 3) {\n                connections.push({\n                    'id': parseInt(line[0]),\n                    'a':  parseInt(line[1]),\n                    'b':  parseInt(line[2])\n                })\n\n                this.totalConnections++;\n            }\n        }\n        \n        this.setState({\n            atoms: atoms,\n            connections: connections,\n            width: width,\n            height: height,\n        }, () => {\n            this.canvas.createCanvas();\n        });\n    }\n\n    downloadFile = () => {\n\n        let text = '';\n\n        text += this.state.width + '\\n';\n        text += this.state.height + '\\n';\n\n        text += '\\n\\n';\n\n        for (let i = 0; i < this.state.atoms.length; i++) {\n            let a = this.state.atoms[i];\n            text += a.id + ' ' + a.x + ' ' + a.y + ' ' + a.z + '\\n';\n        }\n\n        for (let i = 0; i < this.state.connections.length; i++) {\n            let c = this.state.connections[i];\n            text += c.id + ' ' + c.a + ' ' + c.b + '\\n';\n        }\n\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', 'graphene-sample');\n      \n        element.style.display = 'none';\n        document.body.appendChild(element);\n      \n        element.click();\n      \n        document.body.removeChild(element);\n    }\n\n    addAtomToSelection = (id) => {\n        let s = this.state.selection;\n\n        //console.log('adding ' + id + ' to selection which is now:');\n        //console.log(s);\n\n        if (s.type === 'atom') {\n            if (s.ids.includes(id)) {\n                let i = s.ids.indexOf(id);\n                s.ids.splice(i, 1);\n            } else {\n                s.ids.push(id);\n            }\n\n            this.setState({\n                selection: s\n            })\n        } else {\n            this.setState({\n                selection: {\n                    type: 'atom',\n                    ids: [id]\n                }\n            })\n        }\n    }\n\n    addConnectionToSelection = (id) => {\n        let s = this.state.selection;\n\n        if (s.type === 'connection' && s.id === id) {\n            this.setState({\n                selection: {}\n            })\n        } else {\n            this.setState({\n                selection: {\n                    type: 'connection',\n                    id: id\n                }\n            })\n        }\n    }\n\n    removeSelectedConnection = () => {\n        //this.canvas.removeSelectedConnection();\n\n        let id = this.state.selection.id;\n\n        console.log(\"removing connection \" + id);\n\n        this.removeConnectionByID(id);\n    }\n\n    removeConnectionByID = (id) => {\n        let i = this.connectionIndexByID(id);//this.state.connections.indexOf(id);\n\n        let c = this.state.connections\n        c.splice(i, 1);\n\n        this.setState({\n            selection: {},\n            connections: c\n        })\n    }\n\n    removeAtomByID = (id) => {\n        let i = this.atomIndexByID(id);//this.state.connections.indexOf(id);\n\n        let a = this.state.atoms\n        a.splice(i, 1);\n\n        this.setState({\n            selection: {},\n            atoms: a\n        })\n    }\n\n    addConnectionBetweenSelectedAtoms = () => {\n\n        let c = this.state.connections;\n\n        c.push({\n            'id': this.totalConnections++,\n            'a':  this.state.selection.ids[0],\n            'b':  this.state.selection.ids[1]\n        })\n\n        this.setState({\n            connections: c\n        })\n    }\n\n    addConnectionBetweenAtoms = (a, b) => {\n        let c = this.state.connections;\n\n        c.push({\n            'id': this.totalConnections++,\n            'a':  a.id,\n            'b':  b.id\n        })\n\n        this.setState({\n            connections: c\n        })\n    }\n\n    closestToNumber = (n, a) => {\n        let best = a[0];\n        let best_d = Math.abs(a[0] - n);\n\n        for (let i = 0; i < a.length; i++) {\n            if (Math.abs(a[i] - n) < best_d) {\n                best = a[i];\n                best_d = Math.abs(a[i] - n);\n            }\n        }\n\n        return best;\n    }\n\n    distanceBetween = (a, b) => {\n        /*\n        let bestX = this.closestToNumber(b.x, [a.x, a.x - this.state.width, a.x + this.state.width]);\n        let bestY = this.closestToNumber(b.y, [a.y, a.y - this.state.height, a.y + this.state.height]);\n\n        return Math.sqrt((b.x - bestX) * (b.x - bestX) + (b.y - bestY) * (b.y - bestY));\n        */\n       return this.distanceTo(a, b.x, b.y);\n    }\n\n    distanceTo = (a, x, y) => {\n        let bestX = this.closestToNumber(x, [a.x, a.x - this.state.width, a.x + this.state.width]);\n        let bestY = this.closestToNumber(y, [a.y, a.y - this.state.height, a.y + this.state.height]);\n\n        return Math.sqrt((x - bestX) * (x - bestX) + (y - bestY) * (y - bestY));\n    }\n\n    closestAtom = (x, y) => {\n        let closest = this.state.atoms[0];\n        let closest_d = 10e9;\n\n        for (let i = 0; i < this.state.atoms.length; i++) {\n            let d = this.distanceTo(this.state.atoms[i], x, y);\n\n            if (d < closest_d) {\n                closest_d = d;\n                closest = this.state.atoms[i];\n            }\n        }\n\n        return closest;\n    }\n\n    replaceSelectionByAtom = () => {\n        let atoms = this.state.atoms;\n        let connections = this.state.connections;\n\n        let new_id = this.totalAtoms;\n\n        let selectionIDs = this.state.selection.ids;\n\n        let guide = {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n\n        let x = 0, y = 0, z = 0;\n\n        // Always 3 atoms selected when this can be called\n        for(let i = 0; i < selectionIDs.length; i++) {\n            let index = this.atomIndexByID(selectionIDs[i]);\n\n            let a = atoms[index];\n\n            let bestX = this.closestToNumber(guide.x, [a.x, a.x - this.state.width, a.x + this.state.width]);\n            let bestY = this.closestToNumber(guide.y, [a.y, a.y - this.state.height, a.y + this.state.height]);\n\n            x += bestX / 3;\n            y += bestY / 3;\n            z += a.z / 3;\n\n            //set guide to current approximate value\n            guide = {\n                x: x * (3 - i),\n                y: y * (3 - i),\n                z: z * (3 - i)\n            }\n\n            atoms.splice(index, 1);\n        }\n\n        atoms.push({\n            'id': new_id,\n            'x': x,\n            'y': y,\n            'z': z\n        })\n\n        let madeConnectionFrom = [];\n\n        for(let t = 0; t < this.state.selection.ids.length; t++) {\n            let s = this.state.selection.ids[t];\n\n            for(let i = connections.length - 1; i >= 0; i--) {\n                let c = connections[i];\n    \n                if (c.a === s) {\n                    if (madeConnectionFrom.includes(c.b)) {\n                        this.removeConnectionByID(c.id);\n                    } else {\n                        c.a = new_id;\n                        madeConnectionFrom.push(c.b);\n                    }\n                }\n                if (c.b === s) {\n                    if (madeConnectionFrom.includes(c.a)) {\n                        this.removeConnectionByID(c.id);\n                    } else {\n                        c.b = new_id;\n                        madeConnectionFrom.push(c.a);\n                    }\n                }\n            }\n        }\n                \n\n        this.totalAtoms++;\n\n        this.setState({\n            selection: {},\n            atoms: atoms,\n            connections: connections\n        })\n    }\n\n    replaceSelectionByTrio = () => {\n        // Can only be one selected when this function is called\n        let atoms = this.state.atoms;\n        let connections = this.state.connections;\n\n        let atom_id = this.state.selection.ids[0];\n\n        let closest_distance = 10e9;\n\n        for (let i = 0; i < connections.length; i++) {\n            let c = connections[i];\n\n            if (c.a === atom_id) {\n                let d = this.distanceBetween(atoms[this.atomIndexByID(atom_id)], atoms[this.atomIndexByID(c.b)]);\n\n                if (d < closest_distance) {\n                    closest_distance = d;\n                }\n            }\n\n            if (c.b === atom_id) {\n                let d = this.distanceBetween(atoms[this.atomIndexByID(atom_id)], atoms[this.atomIndexByID(c.a)]);\n\n                if (d < closest_distance) {\n                    closest_distance = d;\n                }\n            }\n        }\n\n        //console.log(\"closest distance: \" + closest_distance);\n\n        let old_atom = atoms[this.atomIndexByID(atom_id)];\n\n        this.removeAtomByID(atom_id);\n\n        //console.log(old_atom);\n\n        //let new_id = this.totalAtoms;\n        let x = old_atom.x, y = old_atom.y, z = old_atom.z;\n        let id1 = this.totalAtoms++;\n        let id2 = this.totalAtoms++;\n        let id3 = this.totalAtoms++;\n\n        // TODO: deze + en - moeten ook module width/height\n        let first = {\n            'id': id1,\n            'x': x + closest_distance / 2,\n            'y': y,\n            'z': z\n        };\n\n        let second = {\n            'id': id2,\n            'x': x - closest_distance / 2,\n            'y': y,\n            'z': z\n        };\n\n        let third = {\n            'id': id3,\n            'x': x,\n            'y': y - closest_distance / 2,\n            'z': z\n        };\n\n        atoms.push(first);\n        atoms.push(second);\n        atoms.push(third);\n\n        this.addConnectionBetweenAtoms(first, second);\n        this.addConnectionBetweenAtoms(second, third);\n        this.addConnectionBetweenAtoms(third, first);\n        \n        for (let i = 0; i < connections.length; i++) {\n            let c = connections[i];\n\n            let neighbor_id = null;\n\n            if (c.a === atom_id) {\n                neighbor_id = c.b;\n            }\n\n            if (c.b === atom_id) {\n                neighbor_id = c.a;\n            }\n\n            if (neighbor_id !== null) {\n                let neighbor = atoms[this.atomIndexByID(neighbor_id)];\n\n                let closest = first;\n                let closest_d = this.distanceBetween(neighbor, first);\n\n                if (this.distanceBetween(neighbor, second) < closest_d) {\n                    closest = second;\n                    closest_d = this.distanceBetween(neighbor, second);\n                }\n\n                if (this.distanceBetween(neighbor, third) < closest_d) {\n                    closest = third;\n                }\n\n                if (c.a === atom_id) {\n                    c.a = closest.id;\n                }\n    \n                if (c.b === atom_id) {\n                    c.b = closest.id;\n                }\n            }\n        }\n\n        this.setState({\n            selection: {},\n            atoms: atoms,\n            connections: connections\n        })\n    }\n\n    connectionIndexByID = (id) => {\n\n        for (let i = 0; i < this.state.connections.length; i++) {\n            if (this.state.connections[i].id === id) {\n                return i\n            }\n        }\n\n        return null\n    }\n\n    atomIndexByID = (id) => {\n\n        for (let i = 0; i < this.state.atoms.length; i++) {\n            if (this.state.atoms[i].id === id) {\n                return i\n            }\n        }\n\n        return null\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}