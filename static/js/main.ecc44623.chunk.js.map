{"version":3,"sources":["Atom.js","Connection.js","GrapheneCanvas.js","FileInput.js","Warning.js","Menu.js","App.js","reportWebVitals.js","index.js"],"names":["Atom","props","render","x","y","radius","scale","fill","state","hovered","getColor","onMouseEnter","setState","onMouseLeave","onClick","handleClick","perfectDrawEnabled","onMouseDown","selected","updateScale","s","console","log","id","addToSelection","React","Component","Connection","points","stroke","strokeWidth","GrapheneCanvas","dragged","toFixed","width","totalWidth","height","totalHeight","scaleX","defaultScale","scaleY","ref","stage","centeringX","centeringY","connections","map","connection","getConnectionData","d","getCurrentScale","selection","type","c","addConnectionToSelection","key","atoms","a","coords","coordinateToScreenCoordinate","ids","includes","addAtomToSelection","listening","componentDidMount","container","document","getElementById","addEventListener","window","onResize","zoomStage","startDragging","stopDragging","dragMove","handleKeyDown","handleKeyUp","createCanvas","innerWidth","innerHeight","Math","max","min","offsetx","offsety","currentScale","minScale","screenBottomRight","getScreenPositionFromStage","menuWidth","e","dragStart","getStagePositionFromScreen","pageX","pageY","dragging","p","moveMode","moveSelectedAtoms","nx","ny","updateSquares","centerOnItem","atomIndexByID","centerOnLocation","connectionIndexByID","mouseOverMenu","mouseOverTimeline","factor","deltaY","newscale","zoomStageTo","oldscale","pos","getCurrentPosition","newPositions","to","duration","onFinish","code","mx","my","i","length","b","t","different","sa","st","ss","sb","dx","dy","result","push","sx","sy","error","absolutePosition","createRef","FileInput","startUpload","uploader","click","uploadFile","bind","event","file","target","files","text","then","loadText","getElementsByName","value","name","onChange","this","Warning","className","Alert","severity","action","Button","color","size","hasOwnProperty","location","Menu","IconButton","disabled","selectionIsEmpty","style","fontSize","aria-label","centerOnSelection","canAddConnection","addConnectionBetweenSelectedAtoms","canRemoveConnection","removeSelectedConnection","canReplaceByAtom","replaceSelectionByAtom","singleAtomSelected","replaceSelectionByTrio","fileInput","downloadFile","checkConsistency","warnings","warning","index","href","connectionIndexByAtoms","enterMoveAtomState","App","totalConnections","totalAtoms","canvas","visibleAtoms","visibleConnections","lines","split","parseFloat","line","parseInt","coordToSquare","z","element","createElement","setAttribute","encodeURIComponent","display","body","appendChild","removeChild","concat","checkAllThreeConnections","checkNoIntersections","Set","cs","counts","Object","entries","j","first","second","bx","closestToNumber","by","u","v","vx","vy","intersection","lines_intersect","squares","currentSquares","as","r","filter","atom","rows","square","row","columns","column","edge","atomIDs","round","squareHeight","squareWidth","stageX","stageY","x1","y1","x2","y2","x3","y3","x4","y4","denominator","ua","ub","indexOf","splice","removeConnectionByID","removeAtomByID","addConnectionBetweenAtoms","n","best","best_d","abs","distanceBetween","distanceTo","bestX","bestY","sqrt","closestAtom","closest","closest_d","new_id","selectionIDs","guide","madeConnectionFrom","atom_id","closest_distance","old_atom","third","neighbor_id","neighbor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ecc44623.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Circle } from 'react-konva';\n\nclass Atom extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hovered: false,\n            scale: props.scale\n        }\n    }\n\n    render = () => {\n\n        //console.log(this.props.s)\n        //console.log(15 / this.props.s)\n\n        return ([<Circle\n            x = {this.props.x}\n            y = {this.props.y}\n            radius = {15 / this.props.scale}\n            fill = {this.state.hovered ? this.getColor() : ''}\n            onMouseEnter = {() => this.setState({hovered: true})}\n            onMouseLeave = {() => this.setState({hovered: false})}\n            onClick = {() => this.handleClick()}\n            perfectDrawEnabled={false}\n        />,\n        <Circle\n            x = {this.props.x}\n            y = {this.props.y}\n            radius = {8 / this.props.scale}\n            fill = {this.getColor()}\n            onMouseEnter = {() => this.setState({hovered: true})}\n            onMouseLeave = {() => this.setState({hovered: false})}\n            onMouseDown = {() => this.handleClick()}\n            perfectDrawEnabled={false}\n        />])\n    }\n\n    getColor = () => {\n        return this.props.selected ? 'red' : 'black';\n    }\n    \n    updateScale = (s) => {\n        this.setState({\n            scale: s\n        })\n    }\n\n    handleClick = () => {\n        console.log(\"Selected atom \" + this.props.id);\n        this.props.addToSelection(this.props.id);\n    }\n}\n\nexport default Atom","import React from 'react';\n\nimport { Line } from 'react-konva';\n\nclass Connection extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hovered: false,\n            //scale: props.scale\n        }\n    }\n\n    render = () => {\n        return ([<Line\n            points = {this.props.points}\n            stroke = {this.state.hovered ? this.getColor() : ''}\n            strokeWidth = {12 / this.props.scale}\n            onMouseEnter = {() => this.setState({hovered: true})}\n            onMouseLeave = {() => this.setState({hovered: false})}\n            onMouseDown = {() => this.handleClick()}\n            perfectDrawEnabled={false}\n        />,\n        <Line\n            points = {this.props.points}\n            stroke = {this.getColor()}\n            strokeWidth = {(this.state.hovered ? 5 : 4) / this.props.scale}\n            onMouseEnter = {() => this.setState({hovered: true})}\n            onMouseLeave = {() => this.setState({hovered: false})}\n            onMouseDown = {() => this.handleClick()}\n            perfectDrawEnabled={false}\n        />])\n    }\n    \n    getColor = () => {\n        return this.props.selected ? 'red' : 'black';\n    }\n\n    updateScale = (s) => {\n        //this.setState({\n        //    scale: s\n        //})\n    }\n\n    handleClick = () => {\n        console.log(\"Selected connection \" + this.props.id);\n        this.props.addToSelection(this.props.id);\n    }\n}\n\nexport default Connection","import React from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nimport Atom from './Atom.js';\nimport Connection from './Connection.js';\n\nclass GrapheneCanvas extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.defaultScale = 0;\n        this.menuWidth = 280;\n\n        this.state = {\n            dragging: false,\n            selection: {},\n            offsetx: 0,\n            offsety: 0,\n            centeringX: 0,\n            centeringY: 0,\n            totalWidth: window.innerWidth,\n            totalHeight: window.innerHeight,\n            currentScale: this.defaultScale,\n            minScale: this.defaultScale,\n            dragStart: {x: 0, y: 0},\n            dragged: {x: 0, y: 0},\n            moveMode: false\n        }\n\n        this.stage = React.createRef();\n    }\n\n    render = () => {\n\n        return (\n            <div id=\"canvas-container\">\n                <div id=\"coord-container\">\n                    <span>{-this.state.dragged.x.toFixed(2)}, {-this.state.dragged.y.toFixed(2)}</span>\n                </div>\n                <Stage \n                    width={this.state.totalWidth} \n                    height={this.state.totalHeight}\n                    scaleX={this.defaultScale}\n                    scaleY={this.defaultScale} \n                    \n                    ref={ref => (this.stage = ref)}\n                >\n                    \n                    <Layer\n                        x = {this.state.centeringX}\n                        y = {this.state.centeringY}\n                    >\n                        <Rect\n                            width = {this.props.width}\n                            height = {this.props.height}\n                            stroke = 'black'\n                            strokeWidth = {0.02}\n                            fill= {'rgb(220, 220, 220)'}\n                        />\n\n                        {\n                            this.props.connections.map((connection) => {\n                                let data = this.getConnectionData(connection);\n                                \n                                return data.map((d) => {\n                                    return <Connection\n                                        key = {d.key}\n                                        id= {d.id}\n                                        scale = {this.getCurrentScale()}\n                                        points = {d.points}\n                                        selected = {this.props.selection.type === 'connection' && this.props.selection.id === d.id}\n                                        addToSelection = {(c) => this.props.addConnectionToSelection(c)}\n                                    />\n                                })\n                            })\n                        }\n\n                        {\n                            this.props.atoms.map((a) => {\n\n                                let coords = this.coordinateToScreenCoordinate(a.x, a.y);\n\n                                return (<Atom \n                                    key = {a.id}\n                                    id = {a.id}\n                                    scale = {this.getCurrentScale()}\n                                    x = {coords.x}\n                                    y = {coords.y}\n                                    selected = {this.props.selection.type === 'atom' && this.props.selection.ids.includes(a.id)}\n                                    addToSelection = {(a) => this.props.addAtomToSelection(a)}\n                                />)\n                            })\n                        }\n                    </Layer>\n\n                    <Layer listening={false}>\n                    <Rect\n                            width = {this.state.centeringX}\n                            height = {10 * this.props.height}\n                            fill = {\"#fff\"}\n                    />\n                    <Rect\n                            x = {this.state.centeringX + this.props.width}\n                            width = {this.state.centeringX}\n                            height = {10 * this.props.height}\n                            fill = {\"#fff\"}\n                    />\n\n                    <Rect\n                            width = {10 * this.props.width}\n                            height = {this.state.centeringY}\n                            fill = {\"#fff\"}\n                    />\n\n                    <Rect\n                            y = {this.state.centeringY + this.props.height}\n                            width = {10 * this.props.width}\n                            height = {this.state.centeringY}\n                            fill = {\"#fff\"}\n                    />\n                    </Layer>\n                </Stage>\n            </div>\n        )\n    }\n\n    componentDidMount = () => {\n\n        let container = document.getElementById('canvas-container');\n\n        container.addEventListener('click', this.handleClick);\n        window.addEventListener('resize', this.onResize);\n        container.addEventListener('wheel', this.zoomStage);\n\n        \n        container.addEventListener('mousedown', this.startDragging);\n        window.addEventListener('mouseup', this.stopDragging);\n        window.addEventListener('mousemove', this.dragMove);\n\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        this.createCanvas();\n    }\n\n    createCanvas = () => {\n        let scaleX = (7 * window.innerWidth / 8) / this.props.width;\n        let scaleY = (7 * window.innerHeight / 8) / this.props.height;\n\n        this.defaultScale = Math.max(40, Math.min(scaleX, scaleY));\n\n        this.setState({\n            offsetx: this.props.width / 2,\n            offsety: this.props.height / 2,\n            currentScale: this.defaultScale,//Math.max(this.defaultScale, Math.min(scaleX, scaleY)),\n            minScale: this.defaultScale,//Math.max(this.defaultScale, Math.min(scaleX, scaleY)),\n            centeringX: 0,\n            centeringY: 0\n        }, () => {\n            let screenBottomRight = this.getScreenPositionFromStage(this.props.width / 2, this.props.height / 2);\n            \n            this.setState({\n                centeringX: ((window.innerWidth - screenBottomRight.x + this.menuWidth) / this.state.currentScale) / 2,\n                centeringY: ((window.innerHeight - screenBottomRight.y) / this.state.currentScale) / 2\n            }, () => {\n                console.log(\"Created canvas\");\n            });\n        });\n    }\n\n    startDragging = (e) => {\n\n        this.setState({\n            dragStart: this.getStagePositionFromScreen(e.pageX, e.pageY)\n        }, () => {\n            this.setState({dragging: true});\n        })\n    }\n\n    dragMove = (e) => {\n        if (!this.state.dragging) return;\n\n        let s = this.state.dragStart;\n        let p = this.getStagePositionFromScreen(e.pageX, e.pageY);\n\n        if (this.state.moveMode) {\n            this.setState({\n                dragStart: p\n            });\n\n            this.props.moveSelectedAtoms(p.x - s.x, p.y - s.y);\n        } else {\n\n            let nx = this.state.dragged.x + p.x - s.x;\n            let ny = this.state.dragged.y + p.y - s.y;\n\n            while(nx < -this.props.width / 2) {\n                nx += this.props.width;\n            }\n    \n            while (nx > this.props.width / 2) {\n                nx -= this.props.width;\n            }\n    \n            while(ny < -this.props.height / 2) {\n                ny += this.props.height;\n            }\n    \n            while (ny > this.props.height / 2) {\n                ny -= this.props.height;\n            }\n\n            this.setState({\n                dragged: {\n                    x: nx,\n                    y: ny\n                },\n                dragStart: p\n            })\n        }\n    }\n\n    stopDragging = (e) => {\n        //this.props.checkConsistency();\n        this.props.updateSquares();\n        \n        this.setState({\n            dragging: false\n        }, () => {\n            //console.log(this.state.dragging);\n        })\n    }\n\n    centerOnItem = (type, id) => {\n        if (type === 'atom') {\n            let a = this.props.atoms[this.atomIndexByID(id)];\n\n            this.centerOnLocation(a.x, a.y);\n        }\n\n        // It would be cleaner to do this to focus on the average of a and b,\n        // but that would cause issues with the locations on the edge\n        // because of the modulo in the locations on the canvas\n        if (type === 'connection') {\n            let c = this.props.connections[this.connectionIndexByID(id)];\n            let a = this.props.atoms[this.atomIndexByID(c.a)];\n\n            this.centerOnLocation(a.x, a.y);\n        }\n    }\n\n    centerOnLocation = (x, y) => {\n        this.setState({\n            dragged: {\n                x: -x,\n                y: -y\n            }\n        }, () => this.props.updateSquares())\n    }\n\n    zoomStage = (e) => {\n        if (this.state.mouseOverMenu || this.state.mouseOverTimeline) return;\n        if (this.stage === null) return;\n        \n        let factor = 1;\n        let scaling = 0.4;\n\n        if (e.deltaY < 0) factor += scaling;\n        if (e.deltaY > 0) factor -= scaling;\n\n        let newscale = this.getCurrentScale() * factor;\n\n        this.zoomStageTo((window.innerWidth - this.menuWidth) / 2 + this.menuWidth, window.innerHeight / 2, newscale);\n    }\n\n    zoomStageTo = (x, y, newscale) => {\n        //if (newscale > this.state.maxscale) newscale = this.state.maxscale;\n\n        if (newscale < this.state.minScale) {\n            newscale = this.state.minScale;\n        }\n\n        if (this.stage === null) return;\n\n        let oldscale = this.getCurrentScale();\n        let pos = this.getCurrentPosition();\n\n        let newPositions = [x - (x - pos.x) * newscale / oldscale, y - (y - pos.y) * newscale / oldscale];\n\n        this.setState({\n            currentScale: newscale\n        });\n\n        this.stage.to({\n            scaleX: newscale,\n            scaleY: newscale,\n            x: newPositions[0],\n            y: newPositions[1],\n            duration: 0.1,\n            onFinish: () => {\n            }\n        });\n    }\n\n    handleClick = (e) => {\n        //let p = this.getStagePositionFromScreen(e.pageX, e.pageY);\n\n        //console.log(\"screen position: \" + e.pageX + \", \" + e.pageY);\n        //console.log(\"stage position: \" + p.x + \", \" + p.y);\n    }\n\n    handleKeyDown = (e) => {\n        if (e.code === 'KeyQ') {\n            if (!this.state.moveMode) {\n                this.setState({\n                    moveMode: true\n                })\n            }\n        }\n    }\n\n    handleKeyUp = (e) => {\n        if (e.code === 'KeyQ') {\n            this.setState({\n                moveMode: false\n            })\n        }\n    }\n\n    getStagePositionFromScreen = (x, y) => {\n\n        let s = this.getCurrentScale();\n        let pos = this.getCurrentPosition();\n\n        let mx = (x - pos.x) / s;\n        let my = (y - pos.y) / s;\n        \n        return {x: mx - this.state.offsetx - this.state.centeringX, y: my - this.state.offsety - this.state.centeringY};\n        \n    }\n\n    getScreenPositionFromStage = (x, y) => {\n        let s = this.getCurrentScale();\n        let pos = this.getCurrentPosition();\n        \n        let mx = (x + this.state.offsetx + this.state.centeringX) * s;\n        let my = (y + this.state.offsety + this.state.centeringY) * s;\n\n        return {x: mx + pos.x, y: my + pos.y};\n    }\n\n    //distanceToPoint = (a, b) => Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n\n    connectionIndexByID = (id) => {\n\n        for (let i = 0; i < this.props.connections.length; i++) {\n            if (this.props.connections[i].id === id) {\n                return i\n            }\n        }\n\n        return null\n    }\n\n    atomIndexByID = (id) => {\n\n        for (let i = 0; i < this.props.atoms.length; i++) {\n            if (this.props.atoms[i].id === id) {\n                return i\n            }\n        }\n\n        return null\n    }\n\n    getConnectionData = (c) => {\n\n        let a = this.props.atoms[this.atomIndexByID(c.a)];\n        let b = this.props.atoms[this.atomIndexByID(c.b)];\n\n        /*\n        * We want the line to the closest option for b\n        * b, or b mirrored in x, or b mirrored in y\n        * so to b\n        * or b with b.x +/- width\n        * or b with b.y +/- height\n        */\n        \n        // Copy values of b into target such that changing target does not change b\n        let s = {...a};\n        let t = {...b};\n    \n        let different = false;\n\n        let sa = this.coordinateToScreenCoordinate(a.x, a.y);\n        let st = this.coordinateToScreenCoordinate(t.x, t.y);\n        let ss = this.coordinateToScreenCoordinate(s.x, s.y);\n        let sb = this.coordinateToScreenCoordinate(b.x, b.y);\n\n        let dx = st.x - sa.x;\n        let dy = st.y - sa.y;\n\n        if (dx > this.props.width / 2) {\n            st.x -= this.props.width\n            ss.x += this.props.width\n            different = true;\n        } else if (dx < -this.props.width / 2) {\n            st.x += this.props.width\n            ss.x -= this.props.width\n            different = true;\n        }\n\n        if (dy > this.props.height / 2) {\n            st.y -= this.props.height\n            ss.y += this.props.height\n            different = true;\n        } else if (dy < -this.props.height / 2) {\n            st.y += this.props.height\n            ss.y -= this.props.height\n            different = true;\n        }\n\n        //x = {((a.x + this.state.offsetx + this.state.dragged.x) % this.props.width)}\n        //y = {((a.y + this.state.offsety + this.state.dragged.y) % this.props.height)}\n\n        let result = [\n            {\n                key: c.id,\n                id: c.id,\n                points: [sa.x, sa.y, st.x, st.y]\n            }\n        ];\n\n        if (different) {\n            result.push(\n                {\n                    key: c.id + 10e9,\n                    id: c.id,\n                    points: [ss.x, ss.y, sb.x, sb.y]\n                }\n            )\n        }\n\n        return result;\n    }\n\n    coordinateToScreenCoordinate = (x, y) => {\n        let sx = ((x + this.state.offsetx + this.state.dragged.x) % this.props.width);\n        let sy = ((y + this.state.offsety + this.state.dragged.y) % this.props.height);\n\n        // Because otherwise negative modulo behaves weirdly\n        sx = (sx + this.props.width) % this.props.width;\n        sy = (sy + this.props.height) % this.props.height;\n\n        return {x: sx, y: sy};\n    }\n\n    onResize = () => {\n        \n        this.createCanvas();\n    }\n\n    getCurrentScale = () => {\n        let s = this.state.currentScale;\n\n        try {\n            s = this.stage.scaleX();\n        } catch(error) {\n            console.log(\"Could not get stage.scaleX()\");\n            console.log(error);\n        }\n\n        return s;\n    }\n\n    getCurrentPosition = () => {\n        let pos = {x: 0, y: 0};\n\n        try {\n            pos = this.stage.absolutePosition();\n        } catch(error) {\n            console.log(error)\n        }\n\n        return pos;\n    }\n}\n\nexport default GrapheneCanvas","import React from 'react';\n\nclass FileInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.uploadFile = this.uploadFile.bind(this);\n\n        this.uploader = React.createRef();\n    }\n    \n    uploadFile(event) {\n        let file = event.target.files[0];\n        \n        if (file) {\n            file.text().then((t) => {\n                this.props.loadText(t);\n                \n                let input = document.getElementsByName(\"fileInput\")[0];\n\n                input.value = '';\n            })\n        }\n    }\n    \n    startUpload = () => {\n        this.uploader.click()\n    }\n\n    render() {\n        return <span id=\"file-upload-container\">\n            <input type=\"file\"\n            name=\"fileInput\"\n            ref={(ref) => this.uploader = ref}\n            onChange={this.uploadFile} />\n        </span>\n    }\n}\n\nexport default FileInput;","import React from 'react';\n\nimport Alert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\n\nclass Warning extends React.Component {\n\n    //constructor (props) {\n    //    super(props);\n    //}\n\n    render = () => {\n\n        /*\n        return (\n            <div className='warning'>\n                <p>Warning: inconsistency at {this.props.type} {this.props.id}. <br />\n                {this.props.text}</p>\n            </div>\n        )\n        */\n\n        return (\n            <div className=\"warning\">\n                <Alert severity=\"warning\" action={\n                    <Button color=\"inherit\" size=\"small\" onClick={() => this.props.hasOwnProperty('location') ? this.props.centerOnLocation(this.props.location.x, this.props.location.y) : this.props.centerOnItem(this.props.type, this.props.id)}>\n                    VIEW\n                    </Button>\n                }>\n                        {this.props.text} at {this.props.hasOwnProperty('location') ? (this.props.location.x.toFixed(2) + ', ' + this.props.location.y.toFixed(2)) : (this.props.type + ' ' + this.props.id)}\n                </Alert>\n            </div>\n        )\n    }\n\n    onClick = () => {\n        console.log(\"test\");\n    }\n}\n\nexport default Warning;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\n//import Button from '@material-ui/core/Button';\n\n//import DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\nimport AdjustIcon from '@material-ui/icons/Adjust';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport PublishIcon from '@material-ui/icons/Publish';\n//import ControlCameraIcon from '@material-ui/icons/ControlCamera';\nimport FilterCenterFocusIcon from '@material-ui/icons/FilterCenterFocus';\nimport CheckIcon from '@material-ui/icons/Check';\n\n\nimport FileInput from './FileInput.js';\nimport Warning from './Warning.js';\n\nclass Menu extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.fileInput = React.createRef();\n    }\n\n    render = () => {\n        return (\n            <div id=\"menu-container\">\n                <div>\n                    <div className='button-container'>\n                        <IconButton disabled = {this.selectionIsEmpty()} size=\"medium\" \n                                    style={{fontSize: 14}} aria-label=\"add\"\n                                    onClick = {() => this.props.centerOnSelection()}>\n                            <FilterCenterFocusIcon size=\"large\" />\n                            <span className='button-text'>CENTER ON SELECTION</span>\n                        </IconButton>\n                    </div>\n                    <div className='button-container'>\n                        <IconButton disabled = {!this.canAddConnection()} size=\"medium\" \n                                    style={{fontSize: 14}} aria-label=\"add\"\n                                    onClick = {() => this.addConnectionBetweenSelectedAtoms()}>\n                            <AddCircleIcon size=\"large\" />\n                            <span className='button-text'>ADD CONNECTION</span>\n                        </IconButton>\n                    </div>\n                    <div className='button-container'>\n                        <IconButton disabled = {!this.canRemoveConnection()} size=\"medium\" \n                                    style={{fontSize: 14}} aria-label=\"remove\"\n                                    onClick = {() => this.removeSelectedConnection()}>\n                            <RemoveCircleIcon size=\"large\" />\n                            <span className='button-text'>REMOVE CONNECTION</span>\n                        </IconButton>\n                    </div>\n                    <div className='button-container'>\n                        <IconButton disabled = {!this.canReplaceByAtom()} size=\"medium\" \n                                    style={{fontSize: 14}} aria-label=\"replace-by-one\"\n                                    onClick = {() => this.replaceSelectionByAtom()}>\n                            <AdjustIcon size=\"large\" />\n                            <span className='button-text'>REPLACE TRIO BY ATOM</span>\n                        </IconButton>\n                    </div>\n                    <div className='button-container'>\n                        <IconButton disabled = {!this.singleAtomSelected()} \n                                    size=\"medium\" style={{fontSize: 14}} aria-label=\"replace-by-three\"\n                                    onClick = {() => this.replaceSelectionByTrio()}>\n                            <GroupWorkIcon size=\"large\" />\n                            <span className='button-text'>REPLACE ATOM BY TRIO</span>\n                        </IconButton>\n                    </div>\n                    <div className='button-container'>\n                        <IconButton size=\"medium\" onClick={()=>{this.fileInput.startUpload()}}\n                            style={{fontSize: 14}} aria-label=\"upload\">\n                            <PublishIcon size=\"large\" />\n                            <span className='button-text'>IMPORT FILE</span>\n                            <FileInput ref={(ref) => this.fileInput = ref} loadText = {(t) => this.loadText(t)} />\n                        </IconButton>\n                    </div>\n                    <div className='button-container'>\n                        <IconButton size=\"medium\" onClick={()=>{this.downloadFile()}} style={{fontSize: 14}} aria-label=\"download\">\n                            <GetAppIcon size=\"large\" />\n                            <span className='button-text'>EXPORT FILE</span>\n                        </IconButton>\n                    </div>\n                    <div id=\"warning-container\">\n                        <div className='button-container'>\n                            <IconButton size=\"medium\" onClick={()=>{this.props.checkConsistency()}} style={{fontSize: 14}} aria-label=\"download\">\n                                <CheckIcon size=\"large\" />\n                                <span className='button-text'>CHECK CONSISTENCY</span>\n                            </IconButton>\n                        </div>\n                        {\n                            this.props.connections.length > 500 ? \n                            <p>\n                                Because of the size of the sample this function will only look at part of the sample.\n                            </p> : null\n                        }\n                        \n                        {\n                            this.props.warnings.map((warning, index) => {\n                                return <Warning {...warning} key={index} centerOnLocation={(x, y) => this.props.centerOnLocation(x, y)} centerOnItem={(t, id) => this.props.centerOnItem(t, id)} />;\n                            })\n                        }\n                    </div>\n                    <div id=\"documentation-container\">\n                        <p>\n                            Add any number of atoms or a single connection to the selection by clicking on them.\n                        </p>\n                        <p>\n                            Drag the canvas to move around, hold Q and drag to move selected atoms.\n                        </p>\n                        <p>\n                            For more information on how to use this editor, read the README on <a href=\"https://github.com/jorisBarkema/Graphene-Editor\">Github</a>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    selectionIsEmpty = () => {\n        return !(this.props.selection.type === 'atom' || this.props.selection.type === 'connection');\n    }\n\n    singleAtomSelected = () => {\n        return (\n            this.props.selection.type === 'atom' &&\n            this.props.selection.ids.length === 1\n        )\n    }\n\n    canReplaceByAtom = () => {\n        return (\n            this.props.selection.type === 'atom' &&\n            this.props.selection.ids.length === 3\n        )\n    }\n\n    connectionIndexByAtoms = (x, y) => {\n\n        for (let i = 0; i < this.props.connections.length; i++) {\n                if ((this.props.connections[i].a === x && this.props.connections[i].b === y) ||\n                    (this.props.connections[i].b === x && this.props.connections[i].a === y)) {\n                        return i\n                }\n        }\n\n        return null\n    }\n\n    canAddConnection = () => {\n        return (\n            this.props.selection.type === 'atom' &&\n            this.props.selection.ids.length === 2 && \n            this.connectionIndexByAtoms(this.props.selection.ids[0], this.props.selection.ids[1]) === null\n        )\n    }\n\n    canRemoveConnection = () => {\n        return this.props.selection.type === 'connection';\n    }\n\n    removeSelectedConnection = () => {\n        //console.log(\"removing connection called at menu\");\n        this.props.removeSelectedConnection();\n    }\n\n    enterMoveAtomState = () => {\n        this.props.enterMoveAtomState();\n    }\n\n    addConnectionBetweenSelectedAtoms = () => {\n        this.props.addConnectionBetweenSelectedAtoms()\n    }\n\n    replaceSelectionByAtom = () => {\n        this.props.replaceSelectionByAtom();\n    }\n\n    replaceSelectionByTrio = () => {\n        this.props.replaceSelectionByTrio();\n    }\n\n    loadText = (t) => {\n        this.props.loadText(t);\n    }\n\n    downloadFile = () => {\n        this.props.downloadFile()\n    }\n}\n\nexport default Menu","import React from 'react';\n\nimport GrapheneCanvas from './GrapheneCanvas.js';\nimport Menu from './Menu.js';\n\nclass App extends React.Component {\n\n    totalConnections = 0;\n    totalAtoms = 0;\n    \n    constructor(props) {\n        super(props);\n\n        this.squareHeight = 2.8;\n        this.squareWidth = 2.8;\n\n        this.state = {\n            selection: {},\n            atoms: [],\n            connections: [],\n            squares: {rows: [], columns: []},\n            visibleAtoms: [],\n            visibleConnections: [],\n            width: 5,\n            height: 5,\n            warnings: []\n        };\n\n        this.canvas = React.createRef();\n    }\n\n    render = () => {\n        return (\n            <div>\n                <GrapheneCanvas\n                    ref={ref => (this.canvas = ref)}\n                    selection = {this.state.selection}\n                    atoms = {this.state.visibleAtoms}\n                    connections = {this.state.visibleConnections}\n                    width = {this.state.width}\n                    height = {this.state.height}\n                    addAtomToSelection = {(id) => this.addAtomToSelection(id)}\n                    addConnectionToSelection = {(id) => this.addConnectionToSelection(id)}\n                    moveSelectedAtoms = {(dx, dy) => this.moveSelectedAtoms(dx, dy)}\n                    checkConsistency = {() => this.checkConsistency()}\n                    updateSquares = {() => this.updateSquares()}\n                />\n                <Menu \n                    selection = {this.state.selection}\n                    atoms = {this.state.atoms}\n                    connections = {this.state.connections}\n                    warnings = {this.state.warnings}\n                    centerOnSelection = {() => this.centerOnSelection()}\n                    centerOnItem = {(t, id) => this.centerOnItem(t, id)}\n                    centerOnLocation = {(x, y) => this.centerOnLocation(x, y)}\n                    removeSelectedConnection = {() => this.removeSelectedConnection()}\n                    addConnectionBetweenSelectedAtoms = {() => this.addConnectionBetweenSelectedAtoms()}\n                    replaceSelectionByAtom = {() => this.replaceSelectionByAtom()}\n                    replaceSelectionByTrio = {() => this.replaceSelectionByTrio()}\n                    loadText = {(t) => this.loadText(t)}\n                    downloadFile = {() => this.downloadFile()}\n                    checkConsistency = {() => this.checkConsistency()}\n                />\n            </div>\n        );\n    }\n\n    loadText = (text) => {\n        console.log(\"loading text\");\n\n        let lines = text.split('\\n')\n\n        let width = parseFloat(lines[0]);\n        let height = parseFloat(lines[1]);\n\n        let atoms = [];\n        let connections = [];\n\n        for (let i = 4; i < lines.length; i++) {\n            let line = lines[i].split(/\\s+/);\n            \n            // An atom has 4 properties: id x y z\n            // Also assign it a square to handle big files\n            if (line.length === 4) {\n                atoms.push({\n                    'id': parseInt(line[0]),\n                    'x':  parseFloat(line[1]),\n                    'y':  parseFloat(line[2]),\n                    'z':  parseFloat(line[3]),\n                    'square': this.coordToSquare(parseFloat(line[1]), parseFloat(line[2]), width, height)\n                })\n\n                this.totalAtoms++;\n            }\n\n            // A connection from a to b has 3 properties: id a b\n            else if (line.length === 3) {\n\n                let a = parseInt(line[1]);\n                let b = parseInt(line[2]);\n\n                connections.push({\n                    'id': parseInt(line[0]),\n                    'a':  a,\n                    'b':  b\n                })\n\n                this.totalConnections++;\n            }\n        }\n        \n        this.setState({\n            atoms: atoms,\n            connections: connections,\n            width: width,\n            height: height,\n            warnings: [],\n            selection: {}\n        }, () => {\n            this.canvas.createCanvas();\n\n            this.updateSquares();\n            \n        });\n    }\n\n    downloadFile = () => {\n\n        let text = '';\n\n        text += this.state.width + '\\n';\n        text += this.state.height + '\\n';\n\n        text += '\\n\\n';\n\n        for (let i = 0; i < this.state.atoms.length; i++) {\n            let a = this.state.atoms[i];\n            text += a.id + ' ' + a.x + ' ' + a.y + ' ' + a.z + '\\n';\n        }\n\n        for (let i = 0; i < this.state.connections.length; i++) {\n            let c = this.state.connections[i];\n            text += c.id + ' ' + c.a + ' ' + c.b + '\\n';\n        }\n\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', 'graphene-sample');\n      \n        element.style.display = 'none';\n        document.body.appendChild(element);\n      \n        element.click();\n      \n        document.body.removeChild(element);\n    }\n\n    checkConsistency = async() => {\n        let warnings = []\n        warnings = warnings.concat(this.checkAllThreeConnections());\n        warnings = warnings.concat(this.checkNoIntersections());\n\n        // Necessity for consistency is checking some things twice,\n        // e.g. when a onnection is removed, but also after replacing atom by trio,\n        // which in turn removes connections.\n        // So convert to set and back to array to remove duplicate warnings.\n        warnings = [...new Set(warnings)];\n\n        this.setState({\n            warnings: warnings\n        })\n    }\n\n    checkAllThreeConnections = () => {\n\n        let warnings = [];\n\n        let cs = this.state.connections;\n        let counts = {};\n\n        for(let i = 0; i < cs.length; i++) {\n            let c = cs[i];\n\n            if (c.a in counts) {\n                counts[c.a]++;\n            } else {\n                counts[c.a] = 1;\n            }\n            \n            if (c.b in counts) {\n                counts[c.b]++;\n            } else {\n                counts[c.b] = 1;\n            }\n        }\n\n        for (const [key, value] of Object.entries(counts)) {\n            if (value < 3) {\n                warnings.push({\n                    id: key,\n                    type: 'atom',\n                    text: \"Too few connections\"\n                })\n            }\n\n            if (value > 3) {\n                warnings.push({\n                    id: key,\n                    type: 'atom',\n                    text: \"Too many connections\"\n                })\n            }\n        }\n\n        return warnings;\n    }\n\n    checkNoIntersections = () => {\n        let cs = this.state.connections.length > 500 ? this.state.visibleConnections : this.state.connections;\n        let atoms = this.state.atoms;\n\n        let warnings = [];\n\n        for(let i = 0; i < cs.length; i++) {\n            for (let j = i + 1; j < cs.length; j++) {\n\n                let first = cs[i];\n                let second = cs[j];\n\n                if (first.a === second.a || first.a === second.b || first.b === second.a | first.b === second.b) {\n                    continue;\n                }\n\n                let a = atoms[this.atomIndexByID(first.a)];\n                let b = atoms[this.atomIndexByID(first.b)];\n                \n                let bx = this.closestToNumber(a.x, [b.x, b.x - this.state.width, b.x + this.state.width]);\n                let by = this.closestToNumber(a.y, [b.y, b.y - this.state.height, b.y + this.state.height]);\n\n                let u = atoms[this.atomIndexByID(second.a)];\n                let v = atoms[this.atomIndexByID(second.b)];\n\n                let vx = this.closestToNumber(u.x, [v.x, v.x - this.state.width, v.x + this.state.width]);\n                let vy = this.closestToNumber(u.y, [v.y, v.y - this.state.height, v.y + this.state.height]);\n\n                let intersection = this.lines_intersect(a.x, a.y, bx, by, u.x, u.y, vx, vy);\n\n                if (intersection) {\n                    warnings.push({\n                        location: intersection,\n                        text: `Crossing lines between connections ${first.id} and ${second.id}`\n                    })\n                }\n            }\n        }\n\n        return warnings;\n    }\n\n    updateSquares = () => {\n        this.setState({\n            squares: this.currentSquares()\n        }, () => {\n\n            let as = this.visibleAtoms();\n            this.setState({\n                visibleAtoms: as,\n                visibleConnections: this.visibleConnections(as)\n            })\n        })\n    }\n\n    visibleAtoms = () => {\n        \n        let r = this.state.atoms.filter(atom => (this.state.squares.rows.includes(atom.square.row) && this.state.squares.columns.includes(atom.square.column)));\n        let edge = [];\n\n        for (let i = 0; i < this.state.connections.length; i++) {\n            let c = this.state.connections[i];\n\n            let a = this.state.atoms[this.atomIndexByID(c.a)];\n            let b = this.state.atoms[this.atomIndexByID(c.b)];\n\n            if (r.includes(a) && !r.includes(b) && !edge.includes(b)) {\n                edge.push(b);\n            }\n\n            if (r.includes(b) && !r.includes(a) && !edge.includes(a)) {\n                edge.push(a);\n            }\n        }\n        \n        return r.concat(edge);\n    }\n\n    visibleConnections = (visibleAtoms) => {\n\n        let atomIDs = visibleAtoms.map(a => a.id);\n\n        let r = this.state.connections.filter(c => (atomIDs.includes(c.a) && atomIDs.includes(c.b)));\n\n        return r;\n    }\n\n    coordToSquare = (x, y, width = this.state.width, height = this.state.height) => {\n\n        while(x < -width / 2) {\n            x += width;\n        }\n\n        while (x > width / 2) {\n            x -= width;\n        }\n\n        while(y < -height / 2) {\n            y += height;\n        }\n\n        while (y > height / 2) {\n            y -= height;\n        }\n\n        return {row: Math.round(y / this.squareHeight), column: Math.round(x / this.squareWidth)}\n    }\n\n    currentSquares = () => {\n\n        if (this.canvas === null) return {rows: [0], columns: [0]}\n\n        let stageX = -this.canvas.state.dragged.x;\n        let stageY = -this.canvas.state.dragged.y;\n\n        // Prevent modulo from doing fishy stuff by doing this\n        // Feels a bit hacky though and it is repeated a few times, not very neat\n        while(stageX < -this.state.width / 2) {\n            stageX += this.state.width;\n        }\n\n        while (stageX > this.state.width / 2) {\n            stageX -= this.state.width;\n        }\n\n        while(stageY < -this.state.height / 2) {\n            stageY += this.state.height;\n        }\n\n        while (stageY > this.state.height / 2) {\n            stageY -= this.state.height;\n        }\n\n\n        let rows = [];\n        let columns = [];\n        for(let i = -6; i <= 6; i++) {\n            for(let j = -3; j <= 3; j++) {\n                let s = this.coordToSquare(stageX + i * this.squareWidth, stageY + j * this.squareHeight);\n\n                if (!rows.includes(s.row)) rows.push(s.row);\n                if (!columns.includes(s.column)) columns.push(s.column);\n            }\n        }\n\n        return {rows: rows, columns: columns}\n    }\n\n    // line intercept math by Paul Bourke http://paulbourke.net/geometry/pointlineplane/\n    // Determine the intersection point of two line segments\n    // Return FALSE if the lines don't intersect\n    lines_intersect = (x1, y1, x2, y2, x3, y3, x4, y4) => {\n\n        // Check if none of the lines are of length 0\n        if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n            return false\n        }\n    \n        let denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n    \n        // Lines are parallel\n        if (denominator === 0) {\n            return false\n        }\n    \n        let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator\n        let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator\n    \n        // is the intersection along the segments\n        if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n            return false\n        }\n    \n        // Return a object with the x and y coordinates of the intersection\n        let x = x1 + ua * (x2 - x1)\n        let y = y1 + ua * (y2 - y1)\n    \n        return {x, y}\n    }\n    \n    addAtomToSelection = (id) => {\n        let s = this.state.selection;\n\n        if (s.type === 'atom') {\n            if (s.ids.includes(id)) {\n                let i = s.ids.indexOf(id);\n                s.ids.splice(i, 1);\n            } else {\n                s.ids.push(id);\n            }\n\n            this.setState({\n                selection: s.ids.length > 0 ? s : {}\n            })\n        } else {\n            this.setState({\n                selection: {\n                    type: 'atom',\n                    ids: [id]\n                }\n            })\n        }\n    }\n\n    addConnectionToSelection = (id) => {\n        let s = this.state.selection;\n\n        if (s.type === 'connection' && s.id === id) {\n            this.setState({\n                selection: {}\n            })\n        } else {\n            this.setState({\n                selection: {\n                    type: 'connection',\n                    id: id\n                }\n            })\n        }\n    }\n\n    moveSelectedAtoms = (dx, dy) => {\n        let s = this.state.selection;\n\n        if (s.type === 'connection') return;\n\n        let atoms = this.state.atoms;\n\n        for (let i = 0; i < s.ids.length; i++) {\n            let a = atoms[this.atomIndexByID(s.ids[i])];\n\n            a.x += dx;\n            a.y += dy;\n        }\n    }\n\n    centerOnSelection = () => {\n        let s = this.state.selection;\n        let id = 0;\n\n        if (s.type === 'atom') id = s.ids[0];\n        if (s.type === 'connection') id = s.id;\n\n        this.centerOnItem(s.type, id);\n    }\n\n    centerOnItem = (type, id) => {\n        \n        this.canvas.centerOnItem(type, parseInt(id));\n    }\n\n    centerOnLocation = (x, y) => {\n        this.canvas.centerOnLocation(x, y);\n    }\n\n    removeSelectedConnection = () => {\n        let id = this.state.selection.id;\n\n        this.removeConnectionByID(id);\n    }\n\n    removeConnectionByID = (id) => {\n        let i = this.connectionIndexByID(id);\n\n        let c = this.state.connections\n        let atoms = this.state.atoms;\n\n        c.splice(i, 1);\n\n        this.setState({\n            selection: {},\n            connections: c,\n            atoms: atoms\n        }, () => {\n            //this.checkConsistency();\n        })\n    }\n\n    removeAtomByID = (id) => {\n        let i = this.atomIndexByID(id);\n\n        let a = this.state.atoms\n        a.splice(i, 1);\n\n        this.setState({\n            selection: {},\n            atoms: a\n        }, () => {\n            //this.checkConsistency();\n        })\n    }\n\n    addConnectionBetweenSelectedAtoms = () => {\n\n        let c = this.state.connections;\n        let atoms = this.state.atoms;\n\n        let a = this.state.selection.ids[0];\n        let b = this.state.selection.ids[1];\n\n        c.push({\n            'id': this.totalConnections++,\n            'a':  a,\n            'b':  b\n        })\n\n        this.setState({\n            connections: c,\n            atoms: atoms\n        }, () => {\n            //this.checkConsistency();\n        })\n    }\n\n    addConnectionBetweenAtoms = (a, b) => {\n        let c = this.state.connections;\n        let atoms = this.state.atoms;\n\n        c.push({\n            'id': this.totalConnections++,\n            'a':  a.id,\n            'b':  b.id\n        })\n\n        this.setState({\n            connections: c,\n            atoms: atoms\n        }, () => {\n            //this.checkConsistency();\n        })\n    }\n\n    closestToNumber = (n, a) => {\n        let best = a[0];\n        let best_d = Math.abs(a[0] - n);\n\n        for (let i = 0; i < a.length; i++) {\n            if (Math.abs(a[i] - n) < best_d) {\n                best = a[i];\n                best_d = Math.abs(a[i] - n);\n            }\n        }\n\n        return best;\n    }\n\n    distanceBetween = (a, b) => {\n        return this.distanceTo(a, b.x, b.y);\n    }\n\n    distanceTo = (a, x, y) => {\n        let bestX = this.closestToNumber(x, [a.x, a.x - this.state.width, a.x + this.state.width]);\n        let bestY = this.closestToNumber(y, [a.y, a.y - this.state.height, a.y + this.state.height]);\n\n        return Math.sqrt((x - bestX) * (x - bestX) + (y - bestY) * (y - bestY));\n    }\n\n    closestAtom = (x, y) => {\n        let closest = this.state.atoms[0];\n        let closest_d = 10e9;\n\n        for (let i = 0; i < this.state.atoms.length; i++) {\n            let d = this.distanceTo(this.state.atoms[i], x, y);\n\n            if (d < closest_d) {\n                closest_d = d;\n                closest = this.state.atoms[i];\n            }\n        }\n\n        return closest;\n    }\n\n    replaceSelectionByAtom = () => {\n        let atoms = this.state.atoms;\n        let connections = this.state.connections;\n\n        let new_id = this.totalAtoms;\n\n        let selectionIDs = this.state.selection.ids;\n\n        let guide = {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n\n        let x = 0, y = 0, z = 0;\n\n        // Always 3 atoms selected when this can be called\n        for(let i = 0; i < selectionIDs.length; i++) {\n            let index = this.atomIndexByID(selectionIDs[i]);\n\n            let a = atoms[index];\n\n            let bestX = this.closestToNumber(guide.x, [a.x, a.x - this.state.width, a.x + this.state.width]);\n            let bestY = this.closestToNumber(guide.y, [a.y, a.y - this.state.height, a.y + this.state.height]);\n\n            x += bestX / 3;\n            y += bestY / 3;\n            z += a.z / 3;\n\n            //set guide to current approximate value\n            guide = {\n                x: x * (3 - i),\n                y: y * (3 - i),\n                z: z * (3 - i)\n            }\n\n            atoms.splice(index, 1);\n        }\n\n        atoms.push({\n            'id': new_id,\n            'x': x,\n            'y': y,\n            'z': z\n        })\n\n        let madeConnectionFrom = [];\n\n        for(let t = 0; t < this.state.selection.ids.length; t++) {\n            let s = this.state.selection.ids[t];\n\n            for(let i = connections.length - 1; i >= 0; i--) {\n                let c = connections[i];\n    \n                if (c.a === s) {\n                    if (madeConnectionFrom.includes(c.b)) {\n                        this.removeConnectionByID(c.id);\n                    } else {\n\n                        c.a = new_id;\n                        madeConnectionFrom.push(c.b);\n                    }\n                }\n                if (c.b === s) {\n                    if (madeConnectionFrom.includes(c.a)) {\n                        this.removeConnectionByID(c.id);\n                    } else {\n\n                        c.b = new_id;\n                        madeConnectionFrom.push(c.a);\n                    }\n                }\n            }\n        }\n                \n\n        this.totalAtoms++;\n\n        this.setState({\n            selection: {},\n            atoms: atoms,\n            connections: connections\n        }, () => {\n            //this.checkConsistency();\n        })\n    }\n\n    replaceSelectionByTrio = () => {\n        // Can only be one selected when this function is called\n        let atoms = this.state.atoms;\n        let connections = this.state.connections;\n\n        let atom_id = this.state.selection.ids[0];\n\n        let closest_distance = 10e9;\n\n        for (let i = 0; i < connections.length; i++) {\n            let c = connections[i];\n\n            if (c.a === atom_id) {\n                let d = this.distanceBetween(atoms[this.atomIndexByID(atom_id)], atoms[this.atomIndexByID(c.b)]);\n\n                if (d < closest_distance) {\n                    closest_distance = d;\n                }\n            }\n\n            if (c.b === atom_id) {\n                let d = this.distanceBetween(atoms[this.atomIndexByID(atom_id)], atoms[this.atomIndexByID(c.a)]);\n\n                if (d < closest_distance) {\n                    closest_distance = d;\n                }\n            }\n        }\n\n        let old_atom = atoms[this.atomIndexByID(atom_id)];\n\n        this.removeAtomByID(atom_id);\n\n        let x = old_atom.x, y = old_atom.y, z = old_atom.z;\n        let id1 = this.totalAtoms++;\n        let id2 = this.totalAtoms++;\n        let id3 = this.totalAtoms++;\n\n        // TODO: deze + en - moeten ook module width/height\n        let first = {\n            'id': id1,\n            'x': x + closest_distance / 2,\n            'y': y,\n            'z': z\n        };\n\n        let second = {\n            'id': id2,\n            'x': x - closest_distance / 2,\n            'y': y,\n            'z': z\n        };\n\n        let third = {\n            'id': id3,\n            'x': x,\n            'y': y - closest_distance / 2,\n            'z': z\n        };\n\n        atoms.push(first);\n        atoms.push(second);\n        atoms.push(third);\n\n        this.addConnectionBetweenAtoms(first, second);\n        this.addConnectionBetweenAtoms(second, third);\n        this.addConnectionBetweenAtoms(third, first);\n        \n        for (let i = 0; i < connections.length; i++) {\n            let c = connections[i];\n\n            let neighbor_id = null;\n\n            if (c.a === atom_id) {\n                neighbor_id = c.b;\n            }\n\n            if (c.b === atom_id) {\n                neighbor_id = c.a;\n            }\n\n            if (neighbor_id !== null) {\n                let neighbor = atoms[this.atomIndexByID(neighbor_id)];\n\n                let closest = first;\n                let closest_d = this.distanceBetween(neighbor, first);\n\n                if (this.distanceBetween(neighbor, second) < closest_d) {\n                    closest = second;\n                    closest_d = this.distanceBetween(neighbor, second);\n                }\n\n                if (this.distanceBetween(neighbor, third) < closest_d) {\n                    closest = third;\n                }\n\n                if (c.a === atom_id) {\n                    c.a = closest.id;\n                }\n    \n                if (c.b === atom_id) {\n                    c.b = closest.id;\n                }\n            }\n        }\n\n        this.setState({\n            selection: {},\n            atoms: atoms,\n            connections: connections\n        }, () => {\n            //this.checkConsistency();\n        })\n    }\n\n    connectionIndexByID = (id) => {\n\n        for (let i = 0; i < this.state.connections.length; i++) {\n            if (this.state.connections[i].id === id) {\n                return i\n            }\n        }\n\n        return null\n    }\n\n    atomIndexByID = (id, atoms = null) => {\n\n        if (atoms === null) {\n            atoms = this.state.atoms;\n        }\n\n        for (let i = 0; i < atoms.length; i++) {\n            if (atoms[i].id === id) {\n                return i\n            }\n        }\n\n        return null\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}